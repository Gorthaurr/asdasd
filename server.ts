import express from 'express';
import { createServer as createViteServer } from 'vite';
import { renderToString } from 'react-dom/server';
import { StaticRouter } from 'react-router-dom/server';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ò–º–ø–æ—Ä—Ç—ã React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏

const isProduction = process.env.NODE_ENV === 'production';
const port = process.env.PORT || 3000;

async function createServer() {
  const app = express();
  
  // –°–æ–∑–¥–∞—ë–º Vite —Å–µ—Ä–≤–µ—Ä –≤ dev —Ä–µ–∂–∏–º–µ
  let vite;
  if (!isProduction) {
    vite = await createViteServer({
      server: { middlewareMode: true },
      appType: 'custom'
    });
    app.use(vite.ssrLoadModule);
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    app.use(express.static('dist/client'));
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ—Ç–æ–≤
  const isBot = (userAgent: string): boolean => {
    const botPatterns = [
      'googlebot', 'bingbot', 'yandexbot', 'baiduspider',
      'twitterbot', 'facebookexternalhit', 'rogerbot',
      'linkedinbot', 'embedly', 'quora', 'showyoubot',
      'outbrain', 'pinterest', 'slackbot', 'vkshare',
      'w3c_validator'
    ];
    return botPatterns.some(pattern => 
      userAgent.toLowerCase().includes(pattern)
    );
  };

  // SSR —Ñ—É–Ω–∫—Ü–∏—è
  const render = async (url: string, userAgent: string) => {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π HTML –¥–ª—è –±–æ—Ç–æ–≤
      const html = `
        <div id="root">
          <main class="container">
            <h1>TechnoFame - –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞</h1>
            <p>–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –æ—Ç –≤–µ–¥—É—â–∏—Ö –º–∏—Ä–æ–≤—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π. –®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞, –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞.</p>
            <div class="categories-grid">
              <div class="category-card">
                <img src="/icons/–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏.png" alt="–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏" />
                <h3>–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏</h3>
              </div>
              <div class="category-card">
                <img src="/icons/–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã.png" alt="–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã" />
                <h3>–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã</h3>
              </div>
              <div class="category-card">
                <img src="/icons/–î—É—Ö–æ–≤—ã–µ —à–∫–∞—Ñ—ã.png" alt="–î—É—Ö–æ–≤—ã–µ —à–∫–∞—Ñ—ã" />
                <h3>–î—É—Ö–æ–≤—ã–µ —à–∫–∞—Ñ—ã</h3>
              </div>
            </div>
          </main>
        </div>
      `;
      
      return { html, state: {} };
    } catch (error) {
      console.error('SSR Error:', error);
      return { html: '', state: {} };
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  app.get('*', async (req, res) => {
    const userAgent = req.get('User-Agent') || '';
    const isBotRequest = isBot(userAgent);

    try {
      if (isBotRequest) {
        // –î–ª—è –±–æ—Ç–æ–≤ - SSR
        const { html } = await render(req.url, userAgent);
        
        // –ß–∏—Ç–∞–µ–º HTML —à–∞–±–ª–æ–Ω
        const template = isProduction 
          ? fs.readFileSync('dist/client/index.html', 'utf-8')
          : fs.readFileSync('index.html', 'utf-8');

        // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        const finalHtml = template.replace('<!--ssr-outlet-->', html);

        res.setHeader('Content-Type', 'text/html');
        res.send(finalHtml);
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - SPA
        if (isProduction) {
          res.sendFile(path.resolve('dist/client/index.html'));
        } else {
          const template = fs.readFileSync('index.html', 'utf-8');
          res.send(template);
        }
      }
    } catch (error) {
      console.error('Render error:', error);
      res.status(500).send('Internal Server Error');
    }
  });

  app.listen(port, () => {
    console.log(`üöÄ Server running on port ${port}`);
    console.log(`ü§ñ Bot detection: enabled`);
    console.log(`üì¶ Mode: ${isProduction ? 'production' : 'development'}`);
  });
}

createServer().catch(console.error);
