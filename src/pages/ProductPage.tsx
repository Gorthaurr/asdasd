/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞: —Å–ª–µ–≤–∞ —Ñ–æ—Ç–æ, —Å–ø—Ä–∞–≤–∞ –∫—Ä–∞—Ç–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
 *
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª —Å–∫—Ä–æ–ª–ª–∏—Ç –∫ –ø–æ–ª–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
 * - –ö–ª–∏–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É ‚Äî –∫ –æ—Ç–∑—ã–≤–∞–º
 * - –°–µ—Ä–¥—Ü–µ ‚Äî –∫–∞–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ (–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏–Ω—è—è –∑–∞–ª–∏–≤–∫–∞)
 * - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: ‚àí qty +
 */

import { useMemo, useRef, useCallback } from 'react';
import { useParams } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { useGetProductQuery } from '../api/productsApi';
import { transformProduct } from '../utils/apiTransform';
import type { Product } from '../types/product';
import { fmtCurrency } from '../utils/format';
import { selectCartItems, selectFavIds } from '../features/catalog/selectors';
import { addToCart, changeQty } from '../features/cart/cartSlice';
import { toggleFav } from '../features/favs/favsSlice';

// –¢–∏–ø—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
interface ProductSpec {
  label: string;
  value: string;
}

interface ProductReview {
  user: string;
  rating: number;
  text: string;
}

interface ProductDetails {
  mainSpecs: ProductSpec[];
  fullSpecs: ProductSpec[];
  description: string;
  reviews: ProductReview[];
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
 */
interface RatingStarsProps {
  rating: number;
  size?: number;
  className?: string;
  title?: string;
}

const RatingStars: React.FC<RatingStarsProps> = ({
  rating,
  size = 18,
  className = 'stars',
  title,
}) => {
  const stars = useMemo(() => {
    const full = Math.floor(rating);
    const half = rating - full >= 0.5;

    return Array.from({ length: 5 }).map((_, i) => (
      <svg key={i} width={size} height={size} viewBox="0 0 24 24">
        <path
          d="M12 3.5l2.9 5.9 6.5.9-4.7 4.6 1.1 6.4L12 18.6 6.2 21.3l1.1-6.4L2.6 10.3l6.5-.9 2.9-5.9z"
          fill={i < full ? 'currentColor' : i === full && half ? 'currentColor' : 'none'}
          opacity={i === full && half ? 0.5 : 1}
          stroke="currentColor"
          strokeWidth="0.8"
        />
      </svg>
    ));
  }, [rating, size]);

  return (
    <span
      className={className}
      aria-hidden="true"
      style={{ cursor: title ? 'pointer' : 'default' }}
      title={title}
    >
      {stars}
    </span>
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å fallback
 */
interface ProductImageProps {
  product: Product;
}

const ProductImage: React.FC<ProductImageProps> = ({ product }) => {
  const handleImageError = useCallback((e: React.SyntheticEvent<HTMLImageElement>) => {
    const target = e.target as HTMLImageElement;
    target.style.display = 'none';
    const svg = target.previousElementSibling as SVGElement;
    if (svg) svg.style.display = 'block';
  }, []);

  const handleImageLoad = useCallback((e: React.SyntheticEvent<HTMLImageElement>) => {
    const svg = (e.target as HTMLImageElement).previousElementSibling as SVGElement;
    if (svg) svg.style.display = 'none';
  }, []);

  const hasImages = product.images && product.images.length > 0;

  return (
    <div className="product-gallery">
      {/* SVG placeholder (fallback) */}
      <svg
        viewBox="0 0 800 600"
        xmlns="http://www.w3.org/2000/svg"
        role="img"
        aria-label={`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${product.name}`}
        style={{ display: hasImages ? 'none' : 'block' }}
      >
        <defs>
          <linearGradient id={`pg${product.id}`} x1="0" x2="1">
            <stop offset="0%" stopColor="#1c2340" />
            <stop offset="100%" stopColor="#0f1428" />
          </linearGradient>
        </defs>
        <rect width="800" height="600" fill={`url(#pg${product.id})`} />
        <g fill="#6ea8fe" opacity="0.9">
          <rect x="220" y="140" width="360" height="260" rx="24" />
          <rect x="250" y="170" width="300" height="200" rx="12" fill="#182039" />
          <rect x="370" y="460" width="60" height="14" rx="7" fill="#7cf3d0" />
        </g>
      </svg>

      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
      {hasImages && product.images && (
        <img
          src={product.images[0].url}
          alt={product.images[0].alt_text || product.name}
          className="product-main-image"
          loading="eager"
          onError={handleImageError}
          onLoad={handleImageLoad}
        />
      )}
    </div>
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞
 */
interface QuantityControlProps {
  productId: number;
  quantity: number;
  onQuantityChange: (delta: number) => void;
  onAddToCart: () => void;
}

const QuantityControl: React.FC<QuantityControlProps> = ({
  productId,
  quantity,
  onQuantityChange,
  onAddToCart,
}) => {
  const handleDecrease = useCallback(() => {
    if (quantity > 0) {
      onQuantityChange(-1);
    }
  }, [quantity, onQuantityChange]);

  const handleIncrease = useCallback(() => {
    if (quantity === 0) {
      onAddToCart();
    } else {
      onQuantityChange(1);
    }
  }, [quantity, onQuantityChange, onAddToCart]);

  return (
    <div className="qty-inline" aria-label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ">
      <button
        className="animated-qty-btn"
        aria-label="–£–±—Ä–∞—Ç—å –æ–¥–Ω—É —à—Ç—É–∫—É"
        onClick={handleDecrease}
        disabled={quantity === 0}
        title="‚ûñ –£–±—Ä–∞—Ç—å"
      >
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round">
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
      </button>
      <span className="qty-count" aria-live="polite">
        {quantity}
      </span>
      <button
        className="animated-qty-btn"
        aria-label="–î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É —à—Ç—É–∫—É"
        onClick={handleIncrease}
        title="‚ûï –î–æ–±–∞–≤–∏—Ç—å"
      >
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round">
          <line x1="12" y1="5" x2="12" y2="19"></line>
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
      </button>
    </div>
  );
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
 */
interface ReviewsSectionProps {
  reviews: ProductReview[];
}

const ReviewsSection: React.FC<ReviewsSectionProps> = ({ reviews }) => (
  <section id="reviews" className="panel" style={{ marginTop: 16 }}>
    <h2 style={{ marginTop: 0 }}>üí¨ –û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</h2>
    <div className="reviews">
      {reviews.map((review, index) => (
        <article key={index} className="review">
          <header>
            <strong>üë§ {review.user}</strong>
            <RatingStars
              rating={review.rating}
              size={14}
              title={`‚≠ê ${review.rating} –∏–∑ 5`}
              className="stars"
            />
          </header>
          <p>üí≠ {review.text}</p>
        </article>
      ))}
    </div>
  </section>
);

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
 */
interface SpecificationsSectionProps {
  specs: ProductSpec[];
  title: string;
}

const SpecificationsSection: React.FC<SpecificationsSectionProps> = ({ specs, title }) => (
  <section className="panel" style={{ marginTop: 16 }}>
    <h2 style={{ marginTop: 0 }}>{title}</h2>
    <dl className="full-specs">
      {specs.map((spec) => (
        <div key={spec.label} className="fs-row">
          <dt>{spec.label}</dt>
          <dd>{spec.value}</dd>
        </div>
      ))}
    </dl>
  </section>
);

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:
 * - –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤ –∫–æ—Ä–∑–∏–Ω–µ
 * - –î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 * - –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –æ—Ç–∑—ã–≤–æ–≤
 */
export default function ProductPage() {
  const { id } = useParams<{ id: string }>();

  // –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const {
    data: apiProduct,
    isLoading,
    error,
  } = useGetProductQuery(id || '', {
    skip: !id,
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç frontend
  const product = useMemo<Product | undefined>(() => {
    if (!apiProduct) return undefined;
    return transformProduct(apiProduct);
  }, [apiProduct]);

  const dispatch = useDispatch();
  const cart = useSelector(selectCartItems);
  const favIds = useSelector(selectFavIds);

  const isFav = product ? favIds.includes(product.id) : false;
  const quantity = product ? (cart[product.id] ?? 0) : 0;

  const fullSpecsRef = useRef<HTMLDivElement>(null);
  const reviewsRef = useRef<HTMLDivElement>(null);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ
  const details = useMemo<ProductDetails | null>(() => {
    if (!product) return null;

    const mainSpecs: ProductSpec[] = [
      { label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', value: product.category },
      { label: '–ú–æ–¥–µ–ª—å', value: product.name },
      { label: '–¶–µ–Ω–∞', value: fmtCurrency(product.price) },
      { label: '–†–µ–π—Ç–∏–Ω–≥', value: product.rating.toFixed(1) },
    ];

    const fullSpecs: ProductSpec[] = [
      { label: '–ü–∏—Ç–∞–Ω–∏–µ', value: '220‚Äì240 –í' },
      { label: '–ì–∞—Ä–∞–Ω—Ç–∏—è', value: '24 –º–µ—Å' },
      { label: '–°—Ç—Ä–∞–Ω–∞', value: '–ï–°' },
      { label: '–ê—Ä—Ç–∏–∫—É–ª', value: `TH-${product.id.toString().padStart(5, '0')}` },
      { label: '–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–æ—Ä–ø—É—Å–∞', value: 'ABS –ø–ª–∞—Å—Ç–∏–∫/–º–µ—Ç–∞–ª–ª' },
      { label: '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è', value: '–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä' },
      { label: '–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞', value: '–¥–æ 60 dB' },
      { label: '–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', value: 'A+' },
    ];

    const description =
      '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –ú–æ–¥–µ–ª—å —Å–æ—á–µ—Ç–∞–µ—Ç –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å, —É–¥–æ–±—Å—Ç–≤–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–∞ –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.';

    const reviews: ProductReview[] = [
      { user: '–ê–ª–µ–∫—Å–µ–π', rating: 5, text: '–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–ª–∏—á–Ω–æ–µ, –ø–æ–ª—å–∑—É–µ–º—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.' },
      { user: '–ú–∞—Ä–∏—è', rating: 4, text: '–•–æ—Ä–æ—à–∞—è –º–æ–¥–µ–ª—å, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è.' },
      { user: '–ò–≤–∞–Ω', rating: 4, text: '–¶–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é.' },
    ];

    return { mainSpecs, fullSpecs, description, reviews };
  }, [product]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleQuantityChange = useCallback(
    (delta: number) => {
      if (product) {
        dispatch(changeQty({ id: product.id, delta }));
      }
    },
    [dispatch, product]
  );

  const handleAddToCart = useCallback(() => {
    if (product) {
      dispatch(addToCart(product.id));
    }
  }, [dispatch, product]);

  const handleToggleFav = useCallback(() => {
    if (product) {
      dispatch(toggleFav(product.id));
    }
  }, [dispatch, product]);

  const smoothScrollTo = useCallback((element: HTMLElement | null) => {
    if (!element) return;
    const y = element.getBoundingClientRect().top + window.scrollY - 80;
    window.scrollTo({ top: y, behavior: 'smooth' });
  }, []);

  const handleScrollToReviews = useCallback(() => {
    smoothScrollTo(reviewsRef.current);
  }, [smoothScrollTo]);

  const handleScrollToSpecs = useCallback(() => {
    smoothScrollTo(fullSpecsRef.current);
  }, [smoothScrollTo]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <main className="container" style={{ padding: '24px 0' }}>
        <div className="loading-state">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä...</p>
        </div>
      </main>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  if (error || !product || !details) {
    return (
      <main className="container" style={{ padding: '24px 0' }}>
        <div className="error-state">
          <div className="error-icon">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none">
              <path
                d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"
                stroke="currentColor"
                strokeWidth="1.5"
              />
            </svg>
          </div>
          <h2>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
        </div>
      </main>
    );
  }

  return (
    <main className="container product-page" style={{ padding: '16px 0 40px' }}>
      <section className="product-page-grid">
        {/* –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ */}
        <ProductImage product={product} />

        {/* –°–≤–æ–¥–∫–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="product-summary">
          <h1 style={{ marginTop: 0 }}>{product.name}</h1>

          {/* –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω ‚Üí –∫ –æ—Ç–∑—ã–≤–∞–º */}
          <div
            className="product-rating"
            role="button"
            title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–∑—ã–≤–∞–º"
            onClick={handleScrollToReviews}
          >
            <RatingStars rating={product.rating} />
            <strong>‚≠ê {product.rating.toFixed(1)}</strong>
            <span>(–æ—Ç–∑—ã–≤—ã)</span>
          </div>

          {/* –ö—Ä–∞—Ç–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
          <ul className="specs-list">
            {details.mainSpecs.map((spec) => (
              <li key={spec.label}>
                <span>{spec.label}</span>
                <span>{spec.value}</span>
              </li>
            ))}
          </ul>

          {/* –î–µ–π—Å—Ç–≤–∏—è: ‚àí qty +, –ü–æ–¥—Ä–æ–±–Ω–µ–µ, –°–µ—Ä–¥—Ü–µ */}
          <div className="product-actions">
            <div className="product-price">
              {fmtCurrency(product.price)}
            </div>

            <QuantityControl
              productId={product.id}
              quantity={quantity}
              onQuantityChange={handleQuantityChange}
              onAddToCart={handleAddToCart}
            />

            <button
              className="btn primary"
              onClick={handleScrollToSpecs}
              title="üìã –ö –ø–æ–ª–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º"
            >
              üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ
            </button>

            {/* –°–µ—Ä–¥—Ü–µ-–∏–∑–±—Ä–∞–Ω–Ω–æ–µ: –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏–Ω—è—è –∑–∞–ª–∏–≤–∫–∞ –∫–∞–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ */}
            <button
              className={`animated-fav${isFav ? ' is-active' : ''}`}
              aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
              title={isFav ? 'üíî –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : 'üíñ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
              onClick={handleToggleFav}
            >
              <span style={{ fontSize: '18px' }}>
                {isFav ? 'üíñ' : 'ü§ç'}
              </span>
            </button>
          </div>
        </div>
      </section>

      {/* –ü–æ–ª–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
      <section ref={fullSpecsRef} id="full-specs">
        <SpecificationsSection specs={details.fullSpecs} title="üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏" />
        <h3>üìù –û–ø–∏—Å–∞–Ω–∏–µ</h3>
        <p style={{ color: 'var(--muted)' }}>{details.description}</p>
      </section>

      {/* –û—Ç–∑—ã–≤—ã */}
      <section ref={reviewsRef}>
        <ReviewsSection reviews={details.reviews} />
      </section>
    </main>
  );
}
