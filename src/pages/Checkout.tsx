// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: —Ñ–æ—Ä–º–∞ + —Å–≤–æ–¥–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥¬ª)

import { FormEvent, useState, useEffect } from 'react'; // –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ/—Ç–∏–ø—ã —Ñ–æ—Ä–º—ã
import { useDispatch, useSelector } from 'react-redux'; // Redux-—Ö—É–∫–∏
import { useNavigate } from 'react-router-dom'; // –Ω–∞–≤–∏–≥–∞—Ü–∏—è (Link —É–¥–∞–ª—ë–Ω)
import { selectCartDetailed as selectCartDetailedApi, selectCartItems } from '../features/catalog/apiSelectors'; // —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å—É–º–º–∞
import { clearCart } from '../features/cart/cartSlice'; // —ç–∫—à–µ–Ω –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
import { fmtCurrency } from '../utils/format';
import { toast } from '../utils/toast'; // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
import { useGetProductsQuery } from '../api/productsApi'; // —Ö—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
import AddressAutocomplete from '../components/forms/AddressAutocomplete'; // –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
import http from '../api/http';  // –ò–º–ø–æ—Ä—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ http —Å baseURL

const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://api.technofame.store';

export default function Checkout() {
  const dispatch = useDispatch(); // –æ—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—à–µ–Ω–æ–≤
  const navigate = useNavigate(); // –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
  
  // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const cartItems = useSelector(selectCartItems);
  const cartIds = Object.keys(cartItems).map(id => Number(id));
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤ —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫—ç—à
  // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç selectCartDetailed –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã
  const { isLoading } = useGetProductsQuery({
    page: 1,
    page_size: 50, // –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤
    include_images: true,
    include_attributes: true
  }, {
    skip: cartIds.length === 0 // –Ω–µ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
  });
  
  const { rows, sum } = useSelector(selectCartDetailedApi); // –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã

  // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã (–≤–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–∞—è –Ω–∞ required)
  const [form, setForm] = useState({
    firstName: '',
    lastName: '',
    phone: '',
    email: '',
    address: '', // –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ
    comment: '',
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const [errors, setErrors] = useState<Record<string, string>>({});

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!form.firstName.trim()) newErrors.firstName = '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
    if (!form.lastName.trim()) newErrors.lastName = '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é';
    if (!form.phone.trim()) newErrors.phone = '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    if (!form.email.trim()) newErrors.email = '–£–∫–∞–∂–∏—Ç–µ email –∞–¥—Ä–µ—Å';
    else if (!/\S+@\S+\.\S+/.test(form.email)) newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    if (!form.address.trim()) newErrors.address = '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const handleInvalid = (e: React.FormEvent<HTMLInputElement>) => {
    e.preventDefault();
    const input = e.currentTarget;
    const field = input.id;
    
    const customMessages: Record<string, string> = {
      firstName: 'üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
      lastName: 'üë• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é', 
      phone: 'üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      email: 'üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email',
      address: 'üè† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å'
    };

    setErrors(prev => ({ ...prev, [field]: customMessages[field] || '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ' }));
    input.focus();
  };

  // Submit: (–¥–µ–º–æ) –ª–æ–≥–∏—Ä—É–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast, —á–∏—Å—Ç–∏–º –∫–æ—Ä–∑–∏–Ω—É –∏ —É–≤–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  const onSubmit = async (e: FormEvent) => {
    e.preventDefault();
    
    if (!rows.length) {
      toast.warning('–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      return;
    }
    
    if (!validateForm()) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º—É');
      return;
    }

    const orderData = {
      customer: {
        name: `${form.firstName} ${form.lastName}`,
        email: form.email,
        phone: form.phone,
        address: form.address,
      },
      items: rows.map(row => ({
        product_id: row.id,
        qty: cartItems[row.id]
      })),
      comment: form.comment,
      shipping_cents: 0, // –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
      currency: 'EUR'
    };

    try {
      const response = await http.post('/api/v1/orders', orderData);  // –¢–µ–ø–µ—Ä—å —Å baseURL
      console.log('Order created:', response.data);
      toast.success('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω');
      dispatch(clearCart());
      setTimeout(() => navigate('/'), 2000);
    } catch (error) {
      console.error('Error creating order:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', '–û—à–∏–±–∫–∞');
    }
  };

  return (
    <main className="container checkout-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥¬ª —É–¥–∞–ª–µ–Ω–∞ –ø–æ –ø—Ä–æ—Å—å–±–µ) */}
      <h1>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>

      {/* –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏: —Ñ–æ—Ä–º–∞ (—Å–ª–µ–≤–∞) + —Å–≤–æ–¥–∫–∞ (—Å–ø—Ä–∞–≤–∞) */}
      <div className="checkout-grid">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ñ–æ—Ä–º–∞ */}
        <form className="checkout-form" onSubmit={onSubmit}>
          <fieldset>
            <legend data-section="personal">–ö–æ–Ω—Ç–∞–∫—Ç—ã</legend>
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="firstName">–ò–º—è*</label>
                <input
                  id="firstName"
                  required
                  className={errors.firstName ? 'error' : ''}
                  value={form.firstName}
                  onChange={(e) => {
                    setForm((f) => ({ ...f, firstName: e.target.value }));
                    if (errors.firstName) {
                      setErrors(prev => ({ ...prev, firstName: '' }));
                    }
                  }}
                  placeholder="–ò–≤–∞–Ω"
                  title="üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  onInvalid={handleInvalid}
                />
                {errors.firstName && <div className="form-error">{errors.firstName}</div>}
              </div>
              <div className="form-group">
                <label htmlFor="lastName">–§–∞–º–∏–ª–∏—è*</label>
                <input
                  id="lastName"
                  required
                  className={errors.lastName ? 'error' : ''}
                  value={form.lastName}
                  onChange={(e) => {
                    setForm((f) => ({ ...f, lastName: e.target.value }));
                    if (errors.lastName) {
                      setErrors(prev => ({ ...prev, lastName: '' }));
                    }
                  }}
                  placeholder="–ò–≤–∞–Ω–æ–≤"
                  title="üë• –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é"
                  onInvalid={handleInvalid}
                />
                {errors.lastName && <div className="form-error">{errors.lastName}</div>}
              </div>
            </div>
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω*</label>
                <input
                  id="phone"
                  required
                  type="tel"
                  className={errors.phone ? 'error' : ''}
                  value={form.phone}
                  onChange={(e) => {
                    setForm((f) => ({ ...f, phone: e.target.value }));
                    if (errors.phone) {
                      setErrors(prev => ({ ...prev, phone: '' }));
                    }
                  }}
                  placeholder="+7 999 000-00-00"
                  title="üì± –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                  onInvalid={handleInvalid}
                />
                {errors.phone && <div className="form-error">{errors.phone}</div>}
              </div>
              <div className="form-group">
                <label htmlFor="email">Email*</label>
                <input
                  id="email"
                  required
                  type="email"
                  className={errors.email ? 'error' : ''}
                  value={form.email}
                  onChange={(e) => {
                    setForm((f) => ({ ...f, email: e.target.value }));
                    if (errors.email) {
                      setErrors(prev => ({ ...prev, email: '' }));
                    }
                  }}
                  placeholder="you@example.com"
                  title="üìß –£–∫–∞–∂–∏—Ç–µ email –∞–¥—Ä–µ—Å"
                  onInvalid={handleInvalid}
                />
                {errors.email && <div className="form-error">{errors.email}</div>}
              </div>
            </div>
          </fieldset>

          <fieldset>
            <div className="form-group">
              <label htmlFor="address">–ê–¥—Ä–µ—Å*</label>
              <AddressAutocomplete
                id="address"
                value={form.address}
                onChange={(value) => setForm((f) => ({ ...f, address: value }))}
                onAddressSelect={(suggestion) => {
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ
                  setForm(prev => ({
                    ...prev,
                    address: suggestion.value,
                    // –û—á–∏—â–∞–µ–º –≥–æ—Ä–æ–¥ –∏ –∏–Ω–¥–µ–∫—Å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
                    city: '',
                    zip: ''
                  }));
                  // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
                  setErrors(prev => {
                    const newErrors = { ...prev };
                    delete newErrors.address;
                    delete newErrors.city;
                    delete newErrors.zip;
                    return newErrors;
                  });
                }}
                placeholder="–≥ –ú–æ—Å–∫–≤–∞, —É–ª –¢–≤–µ—Ä—Å–∫–∞—è, –¥ 1"
                required
              />
            </div>
            {/* –ì–æ—Ä–æ–¥ –∏ –∏–Ω–¥–µ–∫—Å –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å */}
            <div className="form-group">
              <label htmlFor="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</label>
              <textarea
                id="comment"
                rows={3}
                value={form.comment}
                onChange={(e) => setForm((f) => ({ ...f, comment: e.target.value }))}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è"
              />
            </div>
          </fieldset>



          <button className="checkout-submit" type="submit" disabled={!rows.length}>
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
          </button>
          {!rows.length && (
            <p style={{ color: 'var(--muted)', marginTop: 8 }}>
              –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.
            </p>
          )}
        </form>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Å–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
        <aside className="order-summary">
          <h2>–í–∞—à –∑–∞–∫–∞–∑</h2>
          <div className="order-items">
            {isLoading ? (
              <div className="loading-cart" style={{ textAlign: 'center', padding: '40px 20px' }}>
                üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...
                <p style={{ fontSize: '0.875rem', color: 'var(--text-muted)', margin: '8px 0 0 0' }}>
                  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ
                </p>
              </div>
            ) : rows.length === 0 ? (
              <div className="empty-cart">
                üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
                <p style={{ fontSize: '0.875rem', color: 'var(--text-muted)', margin: '8px 0 0 0' }}>
                  –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã
                </p>
              </div>
            ) : (
              rows.map((it) => (
                <div key={it.id} className="order-row">
                  {it.images?.[0]?.url ? (
                    <img 
                      src={it.images[0].url} 
                      alt={it.name}
                      onError={(e) => {
                        e.currentTarget.style.display = 'none';
                      }}
                    />
                  ) : (
                    <div style={{ 
                      width: '48px', 
                      height: '48px', 
                      background: 'var(--bg-muted)', 
                      borderRadius: 'var(--radius)',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '1.5rem'
                    }}>
                      üì¶
                    </div>
                  )}
                  <div className="order-row-info">
                    <div className="order-row-name">
                      {it.name === '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' ? `üîÑ –¢–æ–≤–∞—Ä #${it.id}` : it.name}
                    </div>
                    <div className="order-row-details">√ó{it.qty}</div>
                  </div>
                  <div className="row-sum">
                    {fmtCurrency(it.price * it.qty)}
                  </div>
                </div>
              ))
            )}
          </div>
          <div className="sepline" />
          <div className="totals">
            <div className="total-line">üíé –ò—Ç–æ–≥–æ</div>
            <div className="total-line">
              <strong>{fmtCurrency(sum)}</strong>
            </div>
          </div>
        </aside>
      </div>
    </main>
  );
}
