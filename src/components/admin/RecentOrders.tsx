import { useState, useEffect } from 'react';
import { adminApi } from '../../api/adminApi';
import LoadingSpinner from '../common/LoadingSpinner';

interface Order {
  id: string;
  customer_name: string;
  total_cents: number;
  status: string;
  created_at: string;
  items_count: number;
}

const RecentOrders = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
  const handleViewOrder = async (orderId: string) => {
    try {
      const order = await adminApi.getOrder(orderId);
      console.log('Order details:', order);
      // –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞
      alert(`–ó–∞–∫–∞–∑ #${orderId}\n–ö–ª–∏–µ–Ω—Ç: ${order.customer_name}\n–°—É–º–º–∞: ${order.total_cents.toLocaleString('ru-RU')} ‚ÇΩ\n–°—Ç–∞—Ç—É—Å: ${order.status}`);
    } catch (error) {
      console.error('Error fetching order:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞');
    }
  };

  const handleEditOrder = async (orderId: string) => {
    try {
      const order = await adminApi.getOrder(orderId);
      console.log('Order for editing:', order);
      
      // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const statuses = ['pending', 'processing', 'shipped', 'delivered', 'cancelled'];
      const statusLabels = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', 
        'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
      };
      
      const currentStatusLabel = statusLabels[order.status as keyof typeof statusLabels] || order.status;
      
      const newStatus = prompt(
        `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ #${orderId}\n\n` +
        `–ö–ª–∏–µ–Ω—Ç: ${order.customer_name}\n` +
        `–°—É–º–º–∞: ${order.total_cents.toLocaleString('ru-RU')} ‚ÇΩ\n` +
        `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${currentStatusLabel}\n\n` +
        `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n${statuses.map(s => `- ${s}`).join('\n')}\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:`,
        order.status
      );
      
      if (newStatus && newStatus !== order.status) {
        if (statuses.includes(newStatus)) {
          await adminApi.updateOrderStatus(orderId, newStatus);
          const newStatusLabel = statusLabels[newStatus as keyof typeof statusLabels] || newStatus;
          alert(`–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω —Å "${currentStatusLabel}" –Ω–∞ "${newStatusLabel}"`);
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
          window.location.reload();
        } else {
          alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤.');
        }
      }
    } catch (error) {
      console.error('Error updating order:', error);
      alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  };

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        setIsLoading(true);
        const response = await adminApi.getOrders({ page: 1, page_size: 5 });
        setOrders(response.items);
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
        console.error('Error fetching orders:', err);
      } finally {
        setIsLoading(false);
      }
    };

    fetchOrders();
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'status-completed';
      case 'pending':
        return 'status-pending';
      case 'cancelled':
        return 'status-cancelled';
      default:
        return 'status-default';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed':
        return '–í—ã–ø–æ–ª–Ω–µ–Ω';
      case 'pending':
        return '–í –æ–∂–∏–¥–∞–Ω–∏–∏';
      case 'cancelled':
        return '–û—Ç–º–µ–Ω–µ–Ω';
      default:
        return status;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  if (isLoading) {
    return (
      <div className="recent-orders">
        <div className="section-header">
          <h3>üõí –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–∫–∞–∑—ã</h3>
        </div>
        <div className="loading-container">
          <LoadingSpinner size="medium" />
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="recent-orders">
        <div className="section-header">
          <h3>üõí –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–∫–∞–∑—ã</h3>
        </div>
        <div className="error-container">
          <p>{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-card">
      <div className="admin-card-header">
        <h3 className="admin-card-title">üõí –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–∫–∞–∑—ã</h3>
      </div>
      <div className="admin-card-content">

      <div className="orders-list">
        {orders.map((order) => (
          <div key={order.id} className="order-item">
            <div className="order-header">
              <span className="order-number">#{order.id.slice(0, 8)}</span>
              <span className={`order-status ${getStatusColor(order.status)}`}>
                {getStatusText(order.status)}
              </span>
            </div>

            <div className="order-details">
              <div className="customer-info">
                <span className="customer-name">{order.customer_name}</span>
                <span className="order-date">{formatDate(order.created_at)}</span>
              </div>

              <div className="order-amount">
                {order.total_cents.toLocaleString('ru-RU')} ‚ÇΩ
                <div className="items-count">{order.items_count} –ø–æ–∑.</div>
              </div>
            </div>

            <div className="order-actions">
              <button 
                className="action-btn view-btn"
                onClick={() => handleViewOrder(order.id)}
                title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑"
              >
                üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
              </button>
              <button 
                className="action-btn edit-btn"
                onClick={() => handleEditOrder(order.id)}
                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑"
              >
                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
          </div>
        ))}
      </div>

      {orders.length === 0 && (
        <div className="no-orders">
          <p>üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
        </div>
      )}
      </div>
    </div>
  );
};

export default RecentOrders;
