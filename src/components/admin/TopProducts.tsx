import { useState, useEffect } from 'react';
import { adminApi } from '../../api/adminApi';
import LoadingSpinner from '../common/LoadingSpinner';

interface Product {
  id: string;
  name: string;
  price_cents?: number;
  category_name?: string;
  images_count: number;
  has_images: boolean;
}

const TopProducts = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
  const handleViewProduct = async (productId: string) => {
    try {
      const product = await adminApi.getProduct(productId);
      console.log('Product details:', product);
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ
      window.open(`/product/${productId}`, '_blank');
    } catch (error) {
      console.error('Error fetching product:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞');
    }
  };

  const handleEditProduct = async (productId: string) => {
    try {
      const product = await adminApi.getProduct(productId);
      console.log('Product for editing:', product);
      
      // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const currentPrice = product.price_cents ? (product.price_cents / 100).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      
      const editChoice = prompt(
        `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä #${productId}\n\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}\n` +
        `–¶–µ–Ω–∞: ${currentPrice} ‚ÇΩ\n` +
        `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n` +
        `–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n` +
        `1 - –ù–∞–∑–≤–∞–Ω–∏–µ\n` +
        `2 - –¶–µ–Ω—É\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2):`
      );
      
      if (editChoice === '1') {
        const newName = prompt(`–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${product.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`, product.name);
        if (newName && newName !== product.name) {
          await adminApi.updateProduct(productId, { name: newName });
          alert(`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ —Å "${product.name}" –Ω–∞ "${newName}"`);
          window.location.reload();
        }
      } else if (editChoice === '2') {
        const newPrice = prompt(`–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice} ‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:`, currentPrice.replace(/\s/g, ''));
        if (newPrice && newPrice !== currentPrice.replace(/\s/g, '')) {
          const priceInCents = Math.round(parseFloat(newPrice) * 100);
          if (!isNaN(priceInCents) && priceInCents > 0) {
            await adminApi.updateProduct(productId, { price_cents: priceInCents });
            alert(`–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${currentPrice} ‚ÇΩ –Ω–∞ ${newPrice} ‚ÇΩ`);
            window.location.reload();
          } else {
            alert('–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
          }
        }
      }
    } catch (error) {
      console.error('Error updating product:', error);
      alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    }
  };

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setIsLoading(true);
        const response = await adminApi.getProducts({ page: 1, page_size: 5 });
        setProducts(response.items);
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
        console.error('Error fetching products:', err);
      } finally {
        setIsLoading(false);
      }
    };

    fetchProducts();
  }, []);

  if (isLoading) {
    return (
      <div className="top-products">
        <div className="section-header">
          <h3>üî• –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤</h3>
        </div>
        <div className="loading-container">
          <LoadingSpinner size="medium" />
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="top-products">
        <div className="section-header">
          <h3>üî• –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤</h3>
        </div>
        <div className="error-container">
          <p>{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-card">
      <div className="admin-card-header">
        <h3 className="admin-card-title">üî• –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤</h3>
      </div>
      <div className="admin-card-content">

      <div className="products-list">
        {products.map((product, index) => (
          <div key={product.id} className="product-item">
            <div className="product-rank">#{index + 1}</div>

            <div className="product-image">
              {product.has_images ? (
                <div className="image-placeholder">üñºÔ∏è</div>
              ) : (
                <div className="no-image">üì¶</div>
              )}
            </div>

            <div className="product-info">
              <h4 className="product-name">{product.name}</h4>
              <p className="product-category">{product.category_name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</p>
              <div className="product-stats">
                <span className="product-price">
                  {product.price_cents 
                    ? (product.price_cents).toLocaleString('ru-RU') + ' ‚ÇΩ'
                    : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                  }
                </span>
                <span className="product-images">
                  {product.has_images ? `${product.images_count} —Ñ–æ—Ç–æ` : '–ë–µ–∑ —Ñ–æ—Ç–æ'}
                </span>
              </div>
            </div>

            <div className="product-actions">
              <button 
                className="action-btn view-btn"
                onClick={() => handleViewProduct(product.id)}
                title="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞"
              >
                üëÅÔ∏è
              </button>
              <button 
                className="action-btn edit-btn"
                onClick={() => handleEditProduct(product.id)}
                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"
              >
                ‚úèÔ∏è
              </button>
            </div>
          </div>
        ))}
      </div>

      {products.length === 0 && (
        <div className="no-products">
          <p>üì¶ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
        </div>
      )}
      </div>
    </div>
  );
};

export default TopProducts;
