/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞: –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é/–Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞
 *
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - ¬´—Å–µ—Ä–¥—Ü–µ¬ª –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–∞–∫—Ç–∏–≤–Ω–æ–µ = —Å–∏–Ω—è—è –∑–∞–ª–∏–≤–∫–∞)
 * - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (‚àí qty +)
 * - –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
 */

import { useMemo, useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { toggleFav } from '../../features/favs/favsSlice';
import { addToCart, changeQty } from '../../features/cart/cartSlice';
import { selectFavIds, selectCartItems } from '../../features/catalog/selectors';
import { fmtCurrency } from '../../utils/format';
import CategoryIcon from '../common/CategoryIcon';
import type { Product } from '../../types/product';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:
 * - –ü–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
 * - –î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤ –∫–æ—Ä–∑–∏–Ω–µ
 */
export default function ProductCard({ p }: { p: Product }) {
  const dispatch = useDispatch();
  const favIds = useSelector(selectFavIds);
  const cartItems = useSelector(selectCartItems);
  const isFav = favIds.includes(Number(p.id));
  const qty = cartItems[Number(p.id)] ?? 0;
  const [isHovered, setIsHovered] = useState(false);
  const [isVisible, setIsVisible] = useState(false);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const isOnFavoritesPage = window.location.search.includes('fav=1');

  useEffect(() => {
    setIsVisible(true);
  }, []);

  const ratingStars = useMemo(() => {
    const full = Math.floor(p.rating);
    const half = p.rating - full >= 0.5;
    return (
      <span className="stars" aria-hidden="true">
        {Array.from({ length: 5 }).map((_, i) => (
          <svg key={i} width="16" height="16" viewBox="0 0 24 24">
            <path
              d="M12 3.5l2.9 5.9 6.5.9-4.7 4.6 1.1 6.4L12 18.6 6.2 21.3l1.1-6.4L2.6 10.3l6.5-.9 2.9-5.9z"
              fill={i < full ? 'currentColor' : i === full && half ? 'currentColor' : 'none'}
              opacity={i === full && half ? 0.5 : 1}
              stroke="currentColor"
              strokeWidth=".8"
            />
          </svg>
        ))}
      </span>
    );
  }, [p.rating]);

  const handleAddToCart = () => {
    if (qty === 0) {
      dispatch(addToCart(p.id));
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ localStorage –¥–ª—è Checkout
      const cartProducts = JSON.parse(localStorage.getItem('techhome_cart_products') || '{}');
      cartProducts[p.id] = {
        id: p.id,
        name: p.name,
        category: p.category,
        price: p.price,
        images: p.images
      };
      localStorage.setItem('techhome_cart_products', JSON.stringify(cartProducts));
    } else {
      dispatch(changeQty({ id: p.id, delta: +1 }));
    }
  };

  return (
    <article
      className={`card animated-card enhanced-hover breathing stagger-animation ${isVisible ? 'visible' : ''} ${isHovered ? 'hovered' : ''}`}
      data-id={p.id}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="thumb">
        {/* –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ‚Äî –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É (—Å–º. overrides.css) */}
                  <button
            className={`fav animated-fav${isFav ? ' is-active' : ''}`}
            aria-pressed={isFav}
            title={isFav ? 'üíî –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : 'üíñ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
            aria-label="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
            onClick={() => {
              console.log('Toggling favorite for product:', p.id, 'current isFav:', isFav);
              dispatch(toggleFav(Number(p.id)));
            }}
          >
            {/* –ò–∫–æ–Ω–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
            <img 
              src="/icons/–ò–∑–±—Ä–∞–Ω–Ω–æ–µ.png" 
              alt="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
              style={{ 
                width: '18px', 
                height: '18px',
                filter: isFav ? 'none' : 'grayscale(100%) opacity(0.5)'
              }}
            />
            <div className="fav-ripple"></div>
          </button>

        {/* –ü—Ä–µ–≤—å—é ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ */}
        <Link
          to={`/product/${p.id}`}
          aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É: ${p.name}`}
          className="product-link"
        >
          <div className="image-container">
            {/* –ë–µ–π–¥–∂ —Å–∫–∏–¥–∫–∏ */}
            {p.oldPrice && (
              <div className="discount-badge">
                <span>üî• -{Math.round(((p.oldPrice - p.price) / p.oldPrice) * 100)}%</span>
              </div>
            )}

            {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
            {(() => {
              // –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
              const primaryImage = p.images?.find(img => img.is_primary);
              const displayImage = primaryImage || (p.images && p.images.length > 0 ? p.images[0] : null);

              return displayImage ? (
                <img
                  src={displayImage.url}
                  alt={displayImage.alt_text || p.name}
                  className="product-image"
                  loading="lazy"
                  style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    width: '100%',
                    height: '100%',
                    objectFit: 'contain'
                  }}
                  onError={(e) => {
                    // Fallback –∫ SVG –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                    const target = e.target as HTMLImageElement;
                    target.style.display = 'none';
                    const svg = target.nextElementSibling as SVGElement;
                    if (svg) svg.style.display = 'block';
                  }}
                  onLoad={(e) => {
                    // –°–∫—Ä—ã–≤–∞–µ–º SVG placeholder –∫–æ–≥–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                    const svg = (e.target as HTMLImageElement).nextElementSibling as SVGElement;
                    if (svg) svg.style.display = 'none';
                  }}
                />
              ) : null;
            })()}

            {/* SVG placeholder (fallback) */}
            <svg
              viewBox="0 0 600 400"
              xmlns="http://www.w3.org/2000/svg"
              role="img"
              aria-label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              style={{ 
                display: p.images && p.images.length > 0 ? 'none' : 'block',
                position: 'absolute',
                top: 0,
                left: 0,
                width: '100%',
                height: '100%'
              }}
            >
              <defs>
                <linearGradient id={`g${p.id}`} x1="0" x2="1">
                  <stop offset="0%" stopColor="#1c2340" />
                  <stop offset="100%" stopColor="#0f1428" />
                </linearGradient>
              </defs>
              <rect width="600" height="400" fill={`url(#g${p.id})`} />
              <g fill="#6ea8fe" opacity="0.9">
                <rect x="140" y="80" width="320" height="240" rx="24" />
                <rect x="170" y="110" width="260" height="180" rx="12" fill="#182039" />
                <rect x="270" y="300" width="60" height="12" rx="6" fill="#7cf3d0" />
              </g>
            </svg>
            <div className="image-overlay">
              <span className="view-details">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</span>
            </div>
          </div>
        </Link>
      </div>

      <div className="content">
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Ç–æ–∂–µ —Å—Å—ã–ª–∫–∞ */}
        <div className="name">
          <Link
            to={`/product/${p.id}`}
            style={{ color: 'inherit', textDecoration: 'none' }}
          >
            {p.name}
          </Link>
        </div>

        <div className="meta">
          <span className="cat">
            <CategoryIcon categorySlug={p.category} size={16} className="category-icon-inline" />
            {p.category}
          </span> ‚Ä¢ {ratingStars}
          <span className="rating" style={{ marginLeft: 6 }}>
            ‚≠ê {p.rating.toFixed(1)}
          </span>
        </div>

        <div className="price" style={{ gap: 12 }}>
          <div className="price-info">
            <strong className="cost">üí∞ {fmtCurrency(p.price)}</strong>
            {p.oldPrice && <span className="old-price">üè∑Ô∏è {fmtCurrency(p.oldPrice)}</span>}
          </div>

          {/* –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: ‚àí qty + (—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ) */}
          {!isOnFavoritesPage && (
          <div className="qty-inline" aria-label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ">
            <button
              className="qty-btn animated-qty-btn magnetic-btn"
              aria-label="–£–±—Ä–∞—Ç—å –æ–¥–Ω—É —à—Ç—É–∫—É"
              title="‚ûñ –£–±—Ä–∞—Ç—å"
              onClick={() => qty > 0 && dispatch(changeQty({ id: p.id, delta: -1 }))}
              disabled={qty === 0}
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round">
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              <div className="qty-btn-ripple"></div>
              <div className="qty-btn-glow"></div>
            </button>

            <span className="qty-count gradient-text-primary" aria-live="polite">
              {qty}
            </span>

            <button
              className="qty-btn animated-qty-btn magnetic-btn"
              aria-label="–î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É —à—Ç—É–∫—É"
              title="‚ûï –î–æ–±–∞–≤–∏—Ç—å"
              onClick={handleAddToCart}
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              <div className="qty-btn-ripple"></div>
              <div className="qty-btn-glow"></div>
            </button>
          </div>
          )}
        </div>
      </div>

      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
      <div className="card-glow"></div>
      <div className="card-particles">
        <div className="particle particle-1"></div>
        <div className="particle particle-2"></div>
        <div className="particle particle-3"></div>
      </div>
      <div className="morphing-bg"></div>
      <div className="parallax-bg"></div>
    </article>
  );
}
